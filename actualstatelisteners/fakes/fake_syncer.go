// This file was generated by counterfeiter
package fakes

import (
	"os"
	"sync"

	"github.com/cloudfoundry/hm9000/actualstatelisteners"
	"github.com/cloudfoundry/hm9000/models"
)

type FakeSyncer struct {
	RunStub        func(signals <-chan os.Signal, ready chan<- struct{}) error
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		signals <-chan os.Signal
		ready   chan<- struct{}
	}
	runReturns struct {
		result1 error
	}
	HeartbeatStub        func(heartbeat *models.Heartbeat)
	heartbeatMutex       sync.RWMutex
	heartbeatArgsForCall []struct {
		heartbeat *models.Heartbeat
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSyncer) Run(signals <-chan os.Signal, ready chan<- struct{}) error {
	fake.runMutex.Lock()
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		signals <-chan os.Signal
		ready   chan<- struct{}
	}{signals, ready})
	fake.recordInvocation("Run", []interface{}{signals, ready})
	fake.runMutex.Unlock()
	if fake.RunStub != nil {
		return fake.RunStub(signals, ready)
	} else {
		return fake.runReturns.result1
	}
}

func (fake *FakeSyncer) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeSyncer) RunArgsForCall(i int) (<-chan os.Signal, chan<- struct{}) {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return fake.runArgsForCall[i].signals, fake.runArgsForCall[i].ready
}

func (fake *FakeSyncer) RunReturns(result1 error) {
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSyncer) Heartbeat(heartbeat *models.Heartbeat) {
	fake.heartbeatMutex.Lock()
	fake.heartbeatArgsForCall = append(fake.heartbeatArgsForCall, struct {
		heartbeat *models.Heartbeat
	}{heartbeat})
	fake.recordInvocation("Heartbeat", []interface{}{heartbeat})
	fake.heartbeatMutex.Unlock()
	if fake.HeartbeatStub != nil {
		fake.HeartbeatStub(heartbeat)
	}
}

func (fake *FakeSyncer) HeartbeatCallCount() int {
	fake.heartbeatMutex.RLock()
	defer fake.heartbeatMutex.RUnlock()
	return len(fake.heartbeatArgsForCall)
}

func (fake *FakeSyncer) HeartbeatArgsForCall(i int) *models.Heartbeat {
	fake.heartbeatMutex.RLock()
	defer fake.heartbeatMutex.RUnlock()
	return fake.heartbeatArgsForCall[i].heartbeat
}

func (fake *FakeSyncer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	fake.heartbeatMutex.RLock()
	defer fake.heartbeatMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeSyncer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ actualstatelisteners.Syncer = new(FakeSyncer)
